<?php

namespace portalium\storage\components;

use Yii;
use yii\base\BaseObject;
use portalium\site\models\Setting;
use portalium\storage\Module;

class TriggerActions extends BaseObject
{
    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub
    }

    public function onWorkspaceAvailableRoleUpdateAfter($event)
    {
        ['deletedRoles' => $deletedRoles] = $event->payload;

        if (empty($deletedRoles)) {
            return;
        }

        $default_role = Setting::find()->where(['name' => 'storage::workspace::default_role'])->one();
        $admin_role = Setting::find()->where(['name' => 'storage::workspace::admin_role'])->one();
        $settingModel = Setting::findOne(['name' => 'workspace::available_roles']);
        
        foreach ($deletedRoles as $deletedRole) {
            if ($default_role->value == $deletedRole['role']) {
                $availableRoles = json_decode($settingModel->value, true);
                if (!in_array($deletedRole['role'], $availableRoles['storage'])) {
                    $availableRoles['storage'][] = $deletedRole['role'];
                    $settingModel->value = json_encode($availableRoles);
                    $settingModel->save();
                    Yii::$app->session->addFlash('error', Module::t('Default role is not available for storage module. Please check your settings.'));
                }
            }
        }
    }
}