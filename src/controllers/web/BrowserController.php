<?php

namespace portalium\storage\controllers\web;

use portalium\workspace\models\WorkspaceUser;
use Yii;
use yii\web\UploadedFile;
use yii\filters\VerbFilter;
use portalium\web\Controller;
use yii\web\NotFoundHttpException;
use portalium\storage\models\Storage;
use portalium\storage\models\StorageSearch;
use portalium\storage\Module;
use yii\web\ForbiddenHttpException;
use yii\web\HttpException;

/**
 * StorageController implements the CRUD actions for Storage model.
 */
class BrowserController extends Controller
{
    /**
     * @inheritDoc
     */
    public function behaviors()
    {
        return array_merge(
            parent::behaviors(),
            [
                'verbs' => [
                    'class' => VerbFilter::className(),
                    'actions' => [
                        'delete' => ['POST'],
                    ],
                ],
            ]
        );
    }

    /**
     * @inheritDoc
     */
    public function beforeAction($action)
    {
        if (WorkspaceUser::getActiveWorkspaceId() == null) {
            Yii::$app->session->setFlash('error', Module::t('You must select a workspace first.'));
            if (Yii::$app->request->isAjax) {
                Yii::$app->response->format = \yii\web\Response::FORMAT_JSON;
                throw new ForbiddenHttpException(Module::t('You must select a workspace first.'));
            }else{
                throw new NotFoundHttpException(Module::t('You must select a workspace first.'));
            }

        }
        return parent::beforeAction($action); // TODO: Change the autogenerated stub
    }

    /**
     * Lists all Storage models.
     *
     * @return string
     */
    public function actionIndex()
    {
        if (!\Yii::$app->user->can('storageWebDefaultIndex', ['id_module' => 'storage'])) {
            throw new \yii\web\ForbiddenHttpException(Module::t('You are not allowed to access this page.'));
        }
        $dataProvider = new \yii\data\ActiveDataProvider([
            'query' => Storage::find(),
            'pagination' => false
        ]);

        $attributes = ['id_storage'];
        $isJson = 1;
        $widgetName =  '';
        $isPicker = false;
        $model = new Storage();

        return $this->render('index', [
            'dataProvider' => $dataProvider,
            'attributes' => $attributes,
            'isJson' => $isJson,
            'widgetName' => $widgetName,
            'isPicker' => $isPicker,
            'model' => $model
        ]);
    }

    /**
     * Displays a single Storage model.
     * @param int $id Id Storage
     * @return string
     * @throws NotFoundHttpException if the model cannot be found
     */
    public function actionView($id)
    {
        if (!Yii::$app->user->can('storageWebDefaultView', ['id_module' => 'storage'])) {
            throw new \yii\web\ForbiddenHttpException(Module::t('You are not allowed to access this page.'));
        }
        return $this->render('view', [
            'model' => $this->findModel($id),
        ]);
    }

    /**
     * Creates a new Storage model.
     * If creation is successful, the browser will be redirected to the 'view' page.
     * @return string|\yii\web\Response
     */
    public function actionCreate()
    {
        if (!Yii::$app->user->can('storageWebDefaultCreate', ['id_module' => 'storage'])) {
            throw new \yii\web\ForbiddenHttpException(Module::t('You are not allowed to access this page.'));
        }

        $model = new Storage();

        if($this->request->isAjax){
            if($file = UploadedFile::getInstance($model, 'file')){
                if($model->load($this->request->post())){
                    $fileName = md5(rand()) . '.' . $file->extension;
                    if($file->saveAs(Yii::$app->basePath . '/../'. Yii::$app->setting->getValue('storage::path') .'/' . $fileName)){
                        $model->name = $fileName;
                        $model->id_user = Yii::$app->user->id;
                        $model->mime_type = (Storage::MIME_TYPE[$file->type] ?? Storage::MIME_TYPE['other']);
                        $model->id_workspace = WorkspaceUser::getActiveWorkspaceId();
                        
                        if($model->save()){
                            $model = new Storage();
                            \Yii::$app->session->addFlash('success', Module::t('File uploaded successfully'));
                        }else{
                            unlink(Yii::$app->basePath . '/../'. Yii::$app->setting->getValue('storage::path') .'/' . $fileName);
                            \Yii::$app->session->addFlash('error', Module::t('Error uploading file'));
                        }
                    }
                }
            }
        }

        return $this->renderAjax('create', [
            'model' => $model,
        ]);
    }

    /**
     * Updates an existing Storage model.
     * If update is successful, the browser will be redirected to the 'view' page.
     * @param int $id Id Storage
     * @return string|\yii\web\Response
     * @throws NotFoundHttpException if the model cannot be found
     */
    public function actionUpdate($id)
    {
        if (!Yii::$app->user->can('storageWebDefaultUpdate', ['model' => $this->findModel($id)])) {
            throw new \yii\web\ForbiddenHttpException(Module::t('You are not allowed to access this page.'));
        }
        
        $model = $this->findModel($id);

        if($this->request->isAjax){
            if($file = UploadedFile::getInstance($model, 'file['.$id.']')){
                if($model->load($this->request->post())){
                    $oldFileName = $model->name;
                    $fileName = md5(rand()) . '.' . $file->extension;
                    if($file->saveAs(Yii::$app->basePath . '/../'. Yii::$app->setting->getValue('storage::path') .'/' . $fileName)){
                        $model->name = $fileName;
                        $model->id_user = Yii::$app->user->id;
                        $model->mime_type = (Storage::MIME_TYPE[$file->type] ?? Storage::MIME_TYPE['other']);
                        $model->id_workspace = WorkspaceUser::getActiveWorkspaceId();
                        
                        if($model->save()){
                            unlink(Yii::$app->basePath . '/../'. Yii::$app->setting->getValue('storage::path') .'/' . $oldFileName);
                            $model = new Storage();
                            \Yii::$app->session->addFlash('success', Module::t('File uploaded successfully'));
                        }else{
                            unlink(Yii::$app->basePath . '/../'. Yii::$app->setting->getValue('storage::path') .'/' . $fileName);
                            \Yii::$app->session->addFlash('error', Module::t('Error uploading file'));
                        }
                    }
                }
            }else{
                if ($model->load($this->request->post()) && $model->save()) {

                }
            }
        }

        return $this->renderAjax('update', [
            'model' => $model,
        ]);
    }
    
    protected function updatePjax($id)
    {
            $model = $this->findModel($id);
            if (!Yii::$app->user->can('storageWebDefaultUpdate', ['model' => $this->findModel($id)])) {
                return json_encode(['error' => Module::t('Error uploading file')]);
            }
            $model->title = $this->request->post('title');
            $model->file = UploadedFile::getInstanceByName('file');
            if ($model->file){
                $model->deleteFile($model->name);
            }
            if ($model->upload()) {
                return json_encode(['name' => $model->name]);
            }else{
               return json_encode(['error' => Module::t('Error uploading file')]);
            }
    }

    /**
     * Deletes an existing Storage model.
     * If deletion is successful, the browser will be redirected to the 'index' page.
     * @param int $id Id Storage
     * @return \yii\web\Response
     * @throws NotFoundHttpException if the model cannot be found
     */
    public function actionDelete($id)
    {
        if (!Yii::$app->user->can('storageWebDefaultDelete', ['model' => $this->findModel($id)])) {
            throw new \yii\web\ForbiddenHttpException(Module::t('You are not allowed to access this page.'));
        }
        $model = $this->findModel($id);
        if(!$model->deleteFile($model->name))
        {
            \Yii::$app->session->addFlash('error', Module::t('Error deleting file'));
        }

        if(!$model->delete())
        {
            \Yii::$app->session->addFlash('error', Module::t('Error deleting file'));
        }
        if ($this->request->isAjax) {
            Yii::$app->response->format = \yii\web\Response::FORMAT_JSON;
            return ['success' => true];
        }
        return $this->redirect(['index']);
    }

    /**
     * Finds the Storage model based on its primary key value.
     * If the model is not found, a 404 HTTP exception will be thrown.
     * @param int $id Id Storage
     * @return Storage the loaded model
     * @throws NotFoundHttpException if the model cannot be found
     */
    protected function findModel($id)
    {
        if (($model = Storage::findOne(['id_storage' => $id])) !== null) {
            return $model;
        }

        throw new NotFoundHttpException(Module::t('The requested page does not exist.'));
    }

}
